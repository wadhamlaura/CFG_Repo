# -*- coding: utf-8 -*-
"""CFG_DevOps_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nJl4oW8_uFlS9jv3BE4TNu2QrkQT1Tz7

# DevOps Notebook - Session 1

This is a notebook solely for the purpose of demonstrating the DevOps approach to using GitHub.
"""

# importing essential packages

import pandas as pd
import numpy as np
import sklearn
import matplotlib.pyplot as plt
import seaborn as sns

"""# Regression Using the California Housing Dataset

For demonstration purposes, Scikit-Learn has a dataset consisting of 20,000+ samples and 8 features, which represent various housing parameters for different districts in California. The target variable is the median house value. 
"""

from sklearn.datasets import fetch_california_housing

# Load the dataset
california_housing = fetch_california_housing()

# Print the feature names
print(california_housing.feature_names)

# Print the shape of the data
print(california_housing.data.shape)

# Print the target variable
print(california_housing.target)

# Response 

from sklearn.datasets import fetch_california_housing
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Load the dataset
california_housing = fetch_california_housing()

# See the top rows of data (by converting temporarily to a pandas dataframe)
california_df =  pd.DataFrame(california_housing.data, columns = california_housing.feature_names)
california_df.head()

# Split the data into training and testing sets - using the original Scikit-Learn data object.
X_train, X_test, y_train, y_test = train_test_split(california_housing.data, california_housing.target, test_size=0.2, random_state=42)

# Create and train a linear regression model
reg = LinearRegression()
reg.fit(X_train, y_train)

# Make predictions on the test set
y_pred = reg.predict(X_test)

# Compute the mean squared error of the predictions
mse = mean_squared_error(y_test, y_pred)
print("Mean squared error:", mse)


#Visualising the predictions vs the actual data

# Create a scatter plot of the predicted vs actual values
plt.scatter(y_test[0:500], y_pred[0:500])
plt.xlabel("Predicted values")
plt.ylabel("Actual values")
plt.title("Predicted vs Actual Values for Linear Regression Model")
plt.show()
